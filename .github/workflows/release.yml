name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  pages: write
  id-token: write

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.get_version.outputs.VERSION }}

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: |
            {
              "template": "#{{CHANGELOG}}\n\n**Full Changelog**: #{{RELEASE_DIFF}}",
              "categories": [
                {
                  "title": "## 🚀 Features",
                  "labels": ["feature", "enhancement"]
                },
                {
                  "title": "## 🐛 Bug Fixes",
                  "labels": ["bug", "fix"]
                },
                {
                  "title": "## 📚 Documentation",
                  "labels": ["documentation", "docs"]
                },
                {
                  "title": "## 🧰 Maintenance",
                  "labels": ["chore", "maintenance"]
                }
              ],
              "label_extractor": [
                {
                  "pattern": "(feat|feature)",
                  "target": "feature"
                },
                {
                  "pattern": "(fix|bug)",
                  "target": "bug"
                },
                {
                  "pattern": "(doc|docs)",
                  "target": "documentation"
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Docker Image
            
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }}
            ```
            
            ## What's Changed
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: release
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --frozen
          uv pip install pydoc-markdown

      - name: Generate API documentation
        run: |
          mkdir -p docs
          
          # Create a Python script to extract OpenAPI spec
          cat > extract_openapi.py << 'EOF'
          import json
          import sys
          sys.path.insert(0, '.')
          
          from app.main import app
          
          # Get OpenAPI schema
          openapi_schema = app.openapi()
          
          # Write to file
          with open('docs/openapi.json', 'w') as f:
              json.dump(openapi_schema, f, indent=2)
          
          # Also create a simple HTML page
          html_content = f"""
          <!DOCTYPE html>
          <html>
          <head>
              <title>{openapi_schema.get('info', {}).get('title', 'API Documentation')}</title>
              <meta charset="utf-8"/>
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <link href="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css" rel="stylesheet">
          </head>
          <body>
              <div id="swagger-ui"></div>
              <script src="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js"></script>
              <script src="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-standalone-preset.js"></script>
              <script>
                  window.onload = function() {{
                      window.ui = SwaggerUIBundle({{
                          url: './openapi.json',
                          dom_id: '#swagger-ui',
                          presets: [
                              SwaggerUIBundle.presets.apis,
                              SwaggerUIStandalonePreset
                          ],
                          layout: "StandaloneLayout"
                      }});
                  }};
              </script>
          </body>
          </html>
          """
          
          with open('docs/index.html', 'w') as f:
              f.write(html_content)
          
          # Create a simple README for the docs
          readme_content = f"""
          # API Documentation
          
          Version: {openapi_schema.get('info', {}).get('version', 'Unknown')}
          
          ## Description
          {openapi_schema.get('info', {}).get('description', 'No description available')}
          
          ## Interactive Documentation
          
          View the interactive API documentation by opening `index.html` in your browser.
          
          ## OpenAPI Specification
          
          The raw OpenAPI specification is available in `openapi.json`.
          """
          
          with open('docs/README.md', 'w') as f:
              f.write(readme_content)
          EOF
          
          uv run python extract_openapi.py

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4