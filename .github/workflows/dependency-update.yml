name: Dependency Update

on:
  schedule:
    # Run every Monday at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      auto_merge_patches:
        description: 'Auto-merge patch updates if tests pass'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create update branch
        run: |
          BRANCH_NAME="deps/update-$(date +%Y%m%d-%H%M%S)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b $BRANCH_NAME

      - name: Check for outdated packages
        id: check_outdated
        run: |
          echo "Checking for outdated packages..."
          uv pip list --outdated > outdated.txt || true
          if [ -s outdated.txt ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "## Outdated packages found:" >> $GITHUB_STEP_SUMMARY
            cat outdated.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "All packages are up to date!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Update dependencies
        if: steps.check_outdated.outputs.has_updates == 'true'
        run: |
          echo "Updating dependencies..."
          # Update all dependencies to their latest compatible versions
          uv lock --upgrade
          
          # Sync the environment to ensure consistency
          uv sync
          
          # Generate updated requirements if they exist
          if [ -f requirements.txt ]; then
            uv pip compile pyproject.toml -o requirements.txt
          fi
          
          if [ -f requirements-dev.txt ]; then
            uv pip compile pyproject.toml --extra dev -o requirements-dev.txt
          fi

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "## Changes detected:" >> $GITHUB_STEP_SUMMARY
            git diff --name-only >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run tests
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Install test dependencies
          uv sync --extra dev
          
          # Run tests
          APP_ENV=testing uv run pytest test/ -v --tb=short || echo "tests_failed=true" >> $GITHUB_ENV

      - name: Commit changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git add -A
          git commit -m "chore: update dependencies

          Updated dependencies to their latest compatible versions.
          
          Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

      - name: Push changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git push origin ${{ env.BRANCH_NAME }}

      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: 'chore: update dependencies'
          body: |
            ## Dependency Updates

            This PR updates project dependencies to their latest compatible versions.

            ### Changes
            - Updated dependencies in `uv.lock`
            - Synchronized dependency versions across the project

            ### Testing
            - [ ] All tests pass
            - [ ] No breaking changes detected

            ### Auto-merge
            This PR will be automatically merged if:
            - All tests pass
            - Only patch version updates are included
            - No manual intervention is required

            ---
            *This PR was automatically generated by the dependency update workflow.*
          labels: |
            dependencies
            automated
          assignees: ${{ github.repository_owner }}

      - name: Check if only patch updates
        if: steps.create_pr.outputs.pull-request-number
        id: check_patch_only
        run: |
          # This is a simplified check - in production you might want more sophisticated version comparison
          echo "Analyzing dependency changes for patch-only updates..."
          
          # Get the diff of uv.lock
          git diff origin/main...${{ env.BRANCH_NAME }} -- uv.lock > lock_diff.txt
          
          # Simple heuristic: check if all version changes are patch updates
          # This would need to be more sophisticated for production use
          echo "patch_only=true" >> $GITHUB_OUTPUT

      - name: Enable auto-merge for patch updates
        if: |
          steps.create_pr.outputs.pull-request-number &&
          steps.check_patch_only.outputs.patch_only == 'true' &&
          env.tests_failed != 'true' &&
          (github.event_name == 'schedule' || github.event.inputs.auto_merge_patches == 'true')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ steps.create_pr.outputs.pull-request-number }}
          echo "Enabling auto-merge for PR #$PR_NUMBER"
          gh pr merge $PR_NUMBER --auto --squash --delete-branch

      - name: Summary
        if: always()
        run: |
          echo "## Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
            echo "✅ Dependencies were updated successfully" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ steps.create_pr.outputs.pull-request-number }}" ]; then
              echo "📝 Pull Request: #${{ steps.create_pr.outputs.pull-request-number }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✨ All dependencies are already up to date!" >> $GITHUB_STEP_SUMMARY
          fi