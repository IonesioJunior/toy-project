name: Security Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday at midnight UTC
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.4.18"

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --all-packages

      - name: Install security tools
        run: |
          uv pip install pip-audit safety

      - name: Run pip-audit for all projects
        run: |
          echo "Running pip-audit for monorepo..."
          uv run pip-audit --desc

      - name: Run safety check
        run: |
          uv run safety check --json
        continue-on-error: true

      - name: Check for outdated dependencies
        run: |
          uv pip list --outdated

  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install bandit
        run: |
          pip install bandit[toml]

      - name: Run bandit
        run: |
          bandit -r projects/ shared/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          config-file: ./.github/codeql-config.yml
          queries: security-and-quality

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies for CodeQL
        run: |
          # Install dependencies for all projects
          uv sync --all-packages
          
      - name: Create CodeQL database
        run: |
          # Create a dummy script to help CodeQL understand the structure
          echo "# CodeQL Analysis Helper" > codeql_helper.py
          echo "import sys" >> codeql_helper.py
          echo "sys.path.extend(['projects/file-manager-api/src', 'shared'])" >> codeql_helper.py
          echo "# Import modules to help CodeQL discover the code" >> codeql_helper.py
          echo "try:" >> codeql_helper.py
          echo "    from app import main" >> codeql_helper.py
          echo "    from shared.libs.common import logging, exceptions" >> codeql_helper.py
          echo "except ImportError:" >> codeql_helper.py
          echo "    pass" >> codeql_helper.py

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  docker-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images
        run: |
          # Only build if file-manager-api has a Dockerfile
          if [ -f projects/file-manager-api/docker/Dockerfile ]; then
            docker build --target development -t file-manager-api:dev -f projects/file-manager-api/docker/Dockerfile .
            docker build --target production -t file-manager-api:prod -f projects/file-manager-api/docker/Dockerfile .
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: success()
        with:
          image-ref: 'file-manager-api:prod'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  sbom-generation:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install syft
        uses: anchore/sbom-action/download-syft@v0

      - name: Generate SBOM for Python dependencies
        run: |
          syft packages . -o spdx-json > sbom-python.json

      - name: Build Docker image
        run: |
          docker build --target production -t toy-project:prod -f docker/Dockerfile .

      - name: Generate SBOM for Docker image
        run: |
          syft packages docker:toy-project:prod -o spdx-json > sbom-docker.json

      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: |
            sbom-python.json
            sbom-docker.json

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}